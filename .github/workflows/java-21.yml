name: Publish SDK to Maven Central
on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'    
      - '.github/workflows/java-21.yml'

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'dev' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    # Create embedded configuration file from secrets
    - name: Create embedded configuration
      run: |
        mkdir -p src/main/resources
        cat > src/main/resources/sdk-embedded.properties << EOF
        # Embedded SDK Configuration (from GitHub Secrets)
        sdk.embedded.base-url=${{ secrets.SDK_BASE_URL }}
        sdk.embedded.certificate-pem=${{ secrets.CERTIFICATE_PEM }}
        sdk.embedded.abha-certificate-pem=${{ secrets.ABHA_ENCRYPTION_CERTIFICATE }}
        sdk.embedded.facility-hprid-auth=${{ secrets.FACILITY_HPRID_AUTH }}
        sdk.embedded.google-api-key=${{ secrets.GOOGLE_API_KEY }}
        EOF
        echo "Embedded configuration created successfully" 

    - name: Verify embedded configuration
      run: |
        if [ ! -f "src/main/resources/sdk-embedded.properties" ]; then
          echo "Error: Embedded configuration file not created!"
          exit 1
        fi
        echo "Configuration file exists. Checking for required keys..."
        grep -q "sdk.embedded.base-url" src/main/resources/sdk-embedded.properties || { echo "Missing base-url"; exit 1; }
        grep -q "sdk.embedded.certificate-pem" src/main/resources/sdk-embedded.properties || { echo "Missing certificate-pem"; exit 1; }
        grep -q "sdk.embedded.abha-certificate-pem" src/main/resources/sdk-embedded.properties || { echo "Missing abha-certificate-pem"; exit 1; }
        echo "All required configuration keys present"
        
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Setup Maven settings.xml
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml <<EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
                <server>
                    <id>central</id>
                    <username>${{ secrets.MAVEN_USERNAME }}</username>
                    <password>${{ secrets.MAVEN_PASSWORD }}</password>
                </server>
            </servers>
        </settings>
        EOF

    # Extract project version and artifact ID
    - name: Extract project info
      id: project-info
      run: |
        PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
        echo "project_version=$PROJECT_VERSION" >> $GITHUB_ENV
        echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_ENV
        echo "project_version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
        echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT
        echo "Detected project version: $PROJECT_VERSION"
        echo "Detected artifact ID: $ARTIFACT_ID"

    # Build and verify all artifacts are created
    - name: Build project and create artifacts
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Clean and compile first
        mvn clean compile -B
        
        # Generate sources jar
        mvn source:jar-no-fork -B
        
        # Generate javadoc jar
        mvn javadoc:jar -B
        
        # Package everything
        mvn package -B -DskipTests
        
        # Verify all required artifacts exist
        echo "Checking for required artifacts..."
        ls -la target/
        
        PROJECT_VERSION="${{ env.project_version }}"
        ARTIFACT_ID="${{ env.artifact_id }}"
        
        echo "Looking for artifacts with version: $PROJECT_VERSION"
        echo "Artifact ID: $ARTIFACT_ID"
        
        # Check main jar
        if [ ! -f "target/${ARTIFACT_ID}-${PROJECT_VERSION}.jar" ]; then
          echo "Error: Main JAR not found! Expected: target/${ARTIFACT_ID}-${PROJECT_VERSION}.jar"
          exit 1
        fi
        
        # Check sources jar
        if [ ! -f "target/${ARTIFACT_ID}-${PROJECT_VERSION}-sources.jar" ]; then
          echo "Error: Sources JAR not found! Expected: target/${ARTIFACT_ID}-${PROJECT_VERSION}-sources.jar"
          exit 1
        fi
        
        # Check javadoc jar
        if [ ! -f "target/${ARTIFACT_ID}-${PROJECT_VERSION}-javadoc.jar" ]; then
          echo "Error: Javadoc JAR not found! Expected: target/${ARTIFACT_ID}-${PROJECT_VERSION}-javadoc.jar"
          exit 1
        fi
        
        # Verify javadoc jar content
        echo "Verifying javadoc jar content..."
        jar -tf "target/${ARTIFACT_ID}-${PROJECT_VERSION}-javadoc.jar" | head -20
        
        echo "All artifacts created successfully!"

    - name: Deploy to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Deploy with all artifacts
        mvn deploy -B -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} -DskipTests -X | tee $GITHUB_WORKSPACE/deploy.log
        
        if [ ! -f "$GITHUB_WORKSPACE/deploy.log" ]; then
          echo "Error: deploy.log not found!"
          exit 1
        fi

    - name: Show deploy.log contents
      run: |
        cat $GITHUB_WORKSPACE/deploy.log

    - name: Extract deployment ID from Maven logs
      id: extract-id
      run: |
        DEPLOYMENT_ID=$(grep -oP '(?<=deploymentId: )\b[0-9a-fA-F-]{36}\b' $GITHUB_WORKSPACE/deploy.log)
        if [ -z "$DEPLOYMENT_ID" ]; then
          echo "Error: Deployment ID not found!"
          exit 1
        fi
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "Found deployment ID: $DEPLOYMENT_ID"
    
    - name: Wait for validation
      if: steps.extract-id.outputs.deployment_id != ''
      run: |
        echo "Waiting for deployment validation..."
        sleep 60

    - name: Publish deployment
      if: steps.extract-id.outputs.deployment_id != ''
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        DEPLOYMENT_ID="${{ steps.extract-id.outputs.deployment_id }}"
        AUTH_HEADER=$(echo -n "${{ secrets.MAVEN_USERNAME }}:${{ secrets.MAVEN_PASSWORD }}" | base64)
        echo "Publishing deployment $DEPLOYMENT_ID"
        
        response=$(curl -X POST "https://central.sonatype.com/api/v1/publisher/deployment/$DEPLOYMENT_ID" \
          -H "Content-Type: application/json" \
          -H "Authorization: Basic $AUTH_HEADER" \
          -H "Accept: */*" \
          -d '' \
          -w "%{http_code}" \
          -s)
        
        echo "Response: $response"
        
        if echo "$response" | grep -q "error"; then
          echo "Error in publishing: $response"
          exit 1
        fi
        
        echo "Deployment published successfully"

    - name: Generate Documentation for S3
      if: success()
      run: |
        echo "Generating Javadoc documentation for S3..."
        mvn javadoc:javadoc -q
    
        if [ ! -d "target/site/apidocs" ]; then
          echo "Error: Documentation not generated - apidocs folder not found!"
          exit 1
        fi
    
        if [ ! -f "target/site/apidocs/index.html" ]; then
          echo "Error: index.html not found in generated documentation!"
          exit 1
        fi
    
        echo "Documentation generated successfully"
        ls -la target/site/apidocs/

    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload Documentation to S3
      if: success()
      run: |
        echo "Uploading documentation to S3..."
    
        S3_BUCKET="${{ secrets.S3_DOCS_BUCKET }}"
        DOCS_DIR="target/site/apidocs"
    
        if [ -z "$S3_BUCKET" ]; then
          echo "Error: S3_DOCS_BUCKET secret not set!"
          exit 1
        fi
    
        if [ ! -d "$DOCS_DIR" ]; then
          echo "Error: Documentation directory not found!"
          exit 1
        fi
    
        # Remove old docs
        aws s3 rm "s3://$S3_BUCKET/" --recursive
    
        # Upload with automatic MIME type detection
        aws s3 sync "$DOCS_DIR" "s3://$S3_BUCKET/" --delete
    
        echo "Documentation uploaded successfully to S3 bucket: $S3_BUCKET"
    
        S3_WEBSITE_URL="http://$S3_BUCKET.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
        echo "S3_WEBSITE_URL=$S3_WEBSITE_URL" >> $GITHUB_ENV
        echo "Documentation available at: $S3_WEBSITE_URL"

    - name: Invalidate CloudFront Cache (Optional)
      if: success() && vars.CLOUDFRONT_DISTRIBUTION_ID != ''
      run: |
        echo "Invalidating CloudFront cache..."
        aws cloudfront create-invalidation \
          --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
        echo "CloudFront cache invalidation initiated"

    - name: Verify Maven Central deployment
      if: success()
      run: |
        echo "Verifying deployment on Maven Central..."
        
        # Wait a bit for Maven Central to process
        sleep 30
        
        PROJECT_VERSION="${{ env.project_version }}"
        ARTIFACT_ID="${{ env.artifact_id }}"
        GROUP_ID="com.achalahealth.carestack-staging"
        
        # Check if artifacts are available (this might take time to propagate)
        MAVEN_URL="https://repo1.maven.org/maven2/com/achalahealth/carestack-staging/${ARTIFACT_ID}/${PROJECT_VERSION}/"
        
        echo "Checking Maven Central URL: $MAVEN_URL"
        
        # Try to fetch the POM to verify deployment
        if curl -f -s "${MAVEN_URL}${ARTIFACT_ID}-${PROJECT_VERSION}.pom" > /dev/null; then
          echo "✅ Main POM found on Maven Central"
        else
          echo "⏳ Main POM not yet available (might take time to sync)"
        fi
        
        # Check for javadoc jar
        if curl -f -s "${MAVEN_URL}${ARTIFACT_ID}-${PROJECT_VERSION}-javadoc.jar" > /dev/null; then
          echo "✅ Javadoc JAR found on Maven Central"
        else
          echo "⏳ Javadoc JAR not yet available (might take time to sync)"
        fi
        
        # Check for sources jar
        if curl -f -s "${MAVEN_URL}${ARTIFACT_ID}-${PROJECT_VERSION}-sources.jar" > /dev/null; then
          echo "✅ Sources JAR found on Maven Central"
        else
          echo "⏳ Sources JAR not yet available (might take time to sync)"
        fi

    - name: Complete Publishing to Maven Central
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const url = "https://central.sonatype.com/publishing/deployments";
          const projectVersion = process.env.project_version;
          const artifactId = process.env.artifact_id;
          const mavenUrl = `https://repo1.maven.org/maven2/com/achalahealth/carestack-staging/${artifactId}/${projectVersion}/`;
          const docsUrl = process.env.S3_WEBSITE_URL || "S3 bucket configured in secrets";
          
          console.log(`Publishing completed. Visit ${url} to verify the deployment was successful.`);
          console.log(`Maven Central URL: ${mavenUrl}`);
          console.log(`Documentation updated at: ${docsUrl}`);
          
          core.notice(`SDK successfully published to Maven Central!`);
          core.notice(`Maven Central: ${mavenUrl}`);
          core.notice(`Documentation: ${docsUrl}`);
          core.notice(`Javadoc JAR should be available for IDE hover documentation`);

    - name: Post-deployment Summary
      if: always()
      run: |
        echo "=== Deployment Summary ==="
        echo "Deployment Status: ${{ job.status }}"

        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ SDK successfully published to Maven Central with embedded configuration"
          echo "✅ Javadoc JAR created and deployed"
          echo "✅ Sources JAR created and deployed"
          echo "✅ Documentation generated and uploaded to S3"
          echo "✅ Documentation URL: ${{ env.S3_WEBSITE_URL }}"
          echo ""
          echo "📚 For IDE hover documentation to work:"
          echo "   1. Clear your IDE's cache and restart"
          echo "   2. Refresh/reimport your project dependencies"
          echo "   3. The javadoc JAR should be automatically downloaded by Maven/Gradle"
          echo ""
          echo "🔧 Users now only need to configure:"
          echo "   - api.key (required)"
          echo "   - api.url (optional - will use embedded if not provided)"
          echo "   - Other values are embedded from build-time secrets"
        else
          echo "❌ Deployment failed - check logs above"
        fi
